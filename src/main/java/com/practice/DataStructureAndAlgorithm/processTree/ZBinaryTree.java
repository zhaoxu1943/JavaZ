package com.practice.DataStructureAndAlgorithm.processTree;

/**
 * 二叉树(binary tree)是树的一种特殊形式 二叉 ,即这种树的每个节点,最多有2个孩子节点
 * 最多有2个 可能只有1 个 或者没有孩子节点
 *
 * 满二叉树: 一个二叉树所有非叶子节点都存在左右孩子,并且所有叶子节点都在同一层级上,那么这个树就是满二叉树
 * (满二叉树的每一个分支都是满的)
 *
 * 完全二叉树:对于一个有n个节点的二叉树,按照层级顺序,从左到右编号,则所有节点编号为有1到n
 * 如果这个树所有节点和同样深度的满二叉树的编号从1到n位置相同,则这个二叉树为完全二叉树
 *
 * 即满二叉树要求所有分支都是满的,完全二叉树保证最后一个节点前是满的就可以
 *
 * 类似于stack,queue,二叉树同样是逻辑结构,还是需要我们用之前实现的数组和链表来存(基础多么重要!)
 *
 * 二叉树作用
 * 1.查找
 * 二叉搜索树(binary search tree)
 * 性质:
 * 1.如果左子树不为空,则左子树上所有节点均小于根节点
 * 2.如果右子树不为空,则右子树上所有节点均大于根节点
 * 左右子树也都是二叉查找树
 * 对于二叉搜索树,节点总数为n,搜索节点的时间复杂度为O(logN),即二分法的时间复杂度
 *
 * 当然如果一直插入小的值,二叉搜索树会退化为链表,搜索复杂度退化为链表的O(n)
 * 这就涉及到了二叉树的自平衡
 * 如红黑树,AVL树,树堆等
 * @author zhaoxu
 * @className ZBinaryTree
 * @projectName JavaConcentration
 * @date 2020/10/23 23:39
 */
public interface ZBinaryTree {
}
